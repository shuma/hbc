{"ast":null,"code":"import _objectSpread from \"/Users/usmanrajab/Desktop/kry/hbc/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/usmanrajab/Desktop/kry/hbc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usmanrajab/Desktop/kry/hbc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usmanrajab/Desktop/kry/hbc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usmanrajab/Desktop/kry/hbc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usmanrajab/Desktop/kry/hbc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/usmanrajab/Desktop/kry/hbc/src/App.js\";\nimport React, { Component } from \"react\";\nimport jsonData from \"./api/heartburn.json\"; //components\n\nimport Quiz from \"./components/Quiz\";\nimport Result from \"./components/Result\";\nimport Header from \"./components/Header\";\nimport Progress from \"./components/Progress\";\nvar initialState = {\n  counter: 1,\n  questions: jsonData.questions,\n  outcome: jsonData.outcomes,\n  questionId: jsonData.questions[0].id,\n  questionTxt: jsonData.questions[0].question_text,\n  answerOptions: jsonData.questions[0].answers,\n  nextQuestion: jsonData.questions[0].next,\n  questionTotal: jsonData.questions.length,\n  patientScore: 0,\n  result: \"\"\n};\nvar storedState = [];\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = initialState;\n\n    _this.findQuestion = function (id) {\n      var questions = _this.state.questions;\n      return questions.find(function (question) {\n        return question.id === \"\".concat(id);\n      });\n    };\n\n    _this.handleAnswerSelected = function (e) {\n      var nextQuestion = _this.state.nextQuestion;\n      var counter = _this.state.counter + 1;\n\n      _this.setState({\n        counter: counter\n      });\n\n      _this.setUserScore(parseInt(e.currentTarget.value));\n\n      var questionID = e.target.dataset.qid;\n\n      var nextId = _this.setNextQuestionByAnswer(questionID);\n\n      storedState.push(_this.state);\n\n      if (nextQuestion.some(function (a) {\n        return a.answered || a.next_question;\n      })) {\n        setTimeout(function () {\n          return _this.setNextQuestion(nextId);\n        }, 300);\n      } else {\n        setTimeout(function () {\n          return _this.setResults();\n        }, 300);\n      }\n    };\n\n    _this.resetQuiz = function () {\n      _this.setState(_objectSpread({}, initialState));\n    };\n\n    _this.prevQuestion = function () {\n      if (storedState.length >= 1) {\n        _this.setState(_objectSpread({}, storedState.pop()));\n      }\n    };\n\n    _this.setNextQuestionByAnswer = function (answeredId) {\n      var nextQuestion = _this.state.nextQuestion;\n\n      if (nextQuestion.some(function (next) {\n        return next.answered;\n      })) {\n        return nextQuestion.find(function (answer) {\n          return answer.answered === \"\".concat(answeredId);\n        }).next_question;\n      } else if (nextQuestion.some(function (next) {\n        return next.next_question;\n      })) {\n        return nextQuestion[0].next_question;\n      }\n    };\n\n    _this.findDesc = function (arr, score) {\n      for (var i = 0; i < arr.length; i++) {\n        if (score <= arr[i].max_score) return arr[i].outcome;\n      }\n\n      return arr.slice(-1).pop().outcome;\n    };\n\n    _this.findOutome = function (id) {\n      var outcome = _this.state.outcome;\n      return outcome.find(function (outcome) {\n        return outcome.id === \"\".concat(id);\n      });\n    };\n\n    _this.preCalc = function (total, counter) {\n      return counter / total * 100;\n    };\n\n    _this.renderQuiz = function () {\n      var _this$state = _this.state,\n          questionId = _this$state.questionId,\n          questionTxt = _this$state.questionTxt,\n          answerOptions = _this$state.answerOptions;\n      return React.createElement(Quiz, {\n        id: questionId,\n        question: questionTxt,\n        answerOptions: answerOptions,\n        onAnswerSelected: _this.handleAnswerSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      });\n    };\n\n    _this.renderResult = function () {\n      var result = _this.state.result;\n      return React.createElement(Result, {\n        text: result.text,\n        bookingBtn: result.show_booking_button,\n        startOver: _this.resetQuiz,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"setUserScore\",\n    value: function setUserScore(score) {\n      this.setState(function (prevState, props) {\n        return {\n          patientScore: prevState.patientScore + score\n        };\n      });\n    }\n  }, {\n    key: \"setNextQuestion\",\n    value: function setNextQuestion(next) {\n      var nextQuestion = this.findQuestion(next);\n      this.setState(function (prevState, props) {\n        return {\n          questionTxt: nextQuestion.question_text,\n          answerOptions: nextQuestion.answers,\n          nextQuestion: nextQuestion.next\n        };\n      });\n    }\n  }, {\n    key: \"setResults\",\n    value: function setResults() {\n      var _this$state2 = this.state,\n          patientScore = _this$state2.patientScore,\n          nextQuestion = _this$state2.nextQuestion; // Sort the array to avoid multiple OR conditions.\n\n      var sortArr = nextQuestion.slice().sort(function (a, b) {\n        if (!(\"max_score\" in a)) return Number.MAX_SAFE_INTEGER;\n        if (!(\"max_score\" in b)) return Number.MIN_SAFE_INTEGER;\n        return a.max_score - b.score;\n      });\n      var outcomeId = this.findDesc(sortArr, patientScore);\n      var result = this.findOutome(outcomeId);\n      this.setState({\n        result: result\n      });\n    } // This function finds the specific 'outcome' just comparing the current index.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(Header, {\n        backButton: this.prevQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(Progress, {\n        precentValue: this.preCalc(this.state.questionTotal, this.state.counter),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), this.state.result ? this.renderResult() : this.renderQuiz());\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/usmanrajab/Desktop/kry/hbc/src/App.js"],"names":["React","Component","jsonData","Quiz","Result","Header","Progress","initialState","counter","questions","outcome","outcomes","questionId","id","questionTxt","question_text","answerOptions","answers","nextQuestion","next","questionTotal","length","patientScore","result","storedState","App","state","findQuestion","find","question","handleAnswerSelected","e","setState","setUserScore","parseInt","currentTarget","value","questionID","target","dataset","qid","nextId","setNextQuestionByAnswer","push","some","a","answered","next_question","setTimeout","setNextQuestion","setResults","resetQuiz","prevQuestion","pop","answeredId","answer","findDesc","arr","score","i","max_score","slice","findOutome","preCalc","total","renderQuiz","renderResult","text","show_booking_button","prevState","props","sortArr","sort","b","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","outcomeId"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,sBAArB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,CADU;AAEnBC,EAAAA,SAAS,EAAEP,QAAQ,CAACO,SAFD;AAGnBC,EAAAA,OAAO,EAAER,QAAQ,CAACS,QAHC;AAInBC,EAAAA,UAAU,EAAEV,QAAQ,CAACO,SAAT,CAAmB,CAAnB,EAAsBI,EAJf;AAKnBC,EAAAA,WAAW,EAAEZ,QAAQ,CAACO,SAAT,CAAmB,CAAnB,EAAsBM,aALhB;AAMnBC,EAAAA,aAAa,EAAEd,QAAQ,CAACO,SAAT,CAAmB,CAAnB,EAAsBQ,OANlB;AAOnBC,EAAAA,YAAY,EAAEhB,QAAQ,CAACO,SAAT,CAAmB,CAAnB,EAAsBU,IAPjB;AAQnBC,EAAAA,aAAa,EAAElB,QAAQ,CAACO,SAAT,CAAmBY,MARf;AASnBC,EAAAA,YAAY,EAAE,CATK;AAUnBC,EAAAA,MAAM,EAAE;AAVW,CAArB;AAYA,IAAMC,WAAW,GAAG,EAApB;;IACMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQnB,Y;;UAERoB,Y,GAAe,UAAAd,EAAE,EAAI;AAAA,UACXJ,SADW,GACG,MAAKiB,KADR,CACXjB,SADW;AAEnB,aAAOA,SAAS,CAACmB,IAAV,CAAe,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAAChB,EAAT,eAAmBA,EAAnB,CAAJ;AAAA,OAAvB,CAAP;AACD,K;;UAEDiB,oB,GAAuB,UAAAC,CAAC,EAAI;AAAA,UAClBb,YADkB,GACD,MAAKQ,KADJ,CAClBR,YADkB;AAE1B,UAAMV,OAAO,GAAG,MAAKkB,KAAL,CAAWlB,OAAX,GAAqB,CAArC;;AACA,YAAKwB,QAAL,CAAc;AAAExB,QAAAA,OAAO,EAAEA;AAAX,OAAd;;AACA,YAAKyB,YAAL,CAAkBC,QAAQ,CAACH,CAAC,CAACI,aAAF,CAAgBC,KAAjB,CAA1B;;AAEA,UAAMC,UAAU,GAAGN,CAAC,CAACO,MAAF,CAASC,OAAT,CAAiBC,GAApC;;AACA,UAAMC,MAAM,GAAG,MAAKC,uBAAL,CAA6BL,UAA7B,CAAf;;AACAb,MAAAA,WAAW,CAACmB,IAAZ,CAAiB,MAAKjB,KAAtB;;AACA,UAAIR,YAAY,CAAC0B,IAAb,CAAkB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,QAAF,IAAcD,CAAC,CAACE,aAApB;AAAA,OAAnB,CAAJ,EAA2D;AACzDC,QAAAA,UAAU,CAAC;AAAA,iBAAM,MAAKC,eAAL,CAAqBR,MAArB,CAAN;AAAA,SAAD,EAAqC,GAArC,CAAV;AACD,OAFD,MAEO;AACLO,QAAAA,UAAU,CAAC;AAAA,iBAAM,MAAKE,UAAL,EAAN;AAAA,SAAD,EAA0B,GAA1B,CAAV;AACD;AACF,K;;UAEDC,S,GAAY,YAAM;AAChB,YAAKnB,QAAL,mBAAmBzB,YAAnB;AACD,K;;UAED6C,Y,GAAe,YAAM;AACnB,UAAI5B,WAAW,CAACH,MAAZ,IAAsB,CAA1B,EAA6B;AAC3B,cAAKW,QAAL,mBACKR,WAAW,CAAC6B,GAAZ,EADL;AAGD;AACF,K;;UAQDX,uB,GAA0B,UAAAY,UAAU,EAAI;AAAA,UAC9BpC,YAD8B,GACb,MAAKQ,KADQ,CAC9BR,YAD8B;;AAEtC,UAAIA,YAAY,CAAC0B,IAAb,CAAkB,UAAAzB,IAAI;AAAA,eAAIA,IAAI,CAAC2B,QAAT;AAAA,OAAtB,CAAJ,EAA8C;AAC5C,eAAO5B,YAAY,CAACU,IAAb,CAAkB,UAAA2B,MAAM;AAAA,iBAAIA,MAAM,CAACT,QAAP,eAAuBQ,UAAvB,CAAJ;AAAA,SAAxB,EACJP,aADH;AAED,OAHD,MAGO,IAAI7B,YAAY,CAAC0B,IAAb,CAAkB,UAAAzB,IAAI;AAAA,eAAIA,IAAI,CAAC4B,aAAT;AAAA,OAAtB,CAAJ,EAAmD;AACxD,eAAO7B,YAAY,CAAC,CAAD,CAAZ,CAAgB6B,aAAvB;AACD;AACF,K;;UA8BDS,Q,GAAW,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACzB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACpC,MAAxB,EAAgCsC,CAAC,EAAjC,EAAqC;AACnC,YAAID,KAAK,IAAID,GAAG,CAACE,CAAD,CAAH,CAAOC,SAApB,EAA+B,OAAOH,GAAG,CAACE,CAAD,CAAH,CAAOjD,OAAd;AAChC;;AACD,aAAO+C,GAAG,CAACI,KAAJ,CAAU,CAAC,CAAX,EAAcR,GAAd,GAAoB3C,OAA3B;AACD,K;;UAEDoD,U,GAAa,UAAAjD,EAAE,EAAI;AAAA,UACTH,OADS,GACG,MAAKgB,KADR,CACThB,OADS;AAEjB,aAAOA,OAAO,CAACkB,IAAR,CAAa,UAAAlB,OAAO;AAAA,eAAIA,OAAO,CAACG,EAAR,eAAkBA,EAAlB,CAAJ;AAAA,OAApB,CAAP;AACD,K;;UAEDkD,O,GAAU,UAACC,KAAD,EAAQxD,OAAR;AAAA,aAAqBA,OAAO,GAAGwD,KAAX,GAAoB,GAAxC;AAAA,K;;UACVC,U,GAAa,YAAM;AAAA,wBACkC,MAAKvC,KADvC;AAAA,UACTd,UADS,eACTA,UADS;AAAA,UACGE,WADH,eACGA,WADH;AAAA,UACgBE,aADhB,eACgBA,aADhB;AAEjB,aACE,oBAAC,IAAD;AACE,QAAA,EAAE,EAAEJ,UADN;AAEE,QAAA,QAAQ,EAAEE,WAFZ;AAGE,QAAA,aAAa,EAAEE,aAHjB;AAIE,QAAA,gBAAgB,EAAE,MAAKc,oBAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD,K;;UAEDoC,Y,GAAe,YAAM;AAAA,UACX3C,MADW,GACA,MAAKG,KADL,CACXH,MADW;AAEnB,aACE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAEA,MAAM,CAAC4C,IADf;AAEE,QAAA,UAAU,EAAE5C,MAAM,CAAC6C,mBAFrB;AAGE,QAAA,SAAS,EAAE,MAAKjB,SAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD,K;;;;;;;iCA9EYO,K,EAAO;AAClB,WAAK1B,QAAL,CAAc,UAACqC,SAAD,EAAYC,KAAZ;AAAA,eAAuB;AACnChD,UAAAA,YAAY,EAAE+C,SAAS,CAAC/C,YAAV,GAAyBoC;AADJ,SAAvB;AAAA,OAAd;AAGD;;;oCAYevC,I,EAAM;AACpB,UAAMD,YAAY,GAAG,KAAKS,YAAL,CAAkBR,IAAlB,CAArB;AACA,WAAKa,QAAL,CAAc,UAACqC,SAAD,EAAYC,KAAZ;AAAA,eAAuB;AACnCxD,UAAAA,WAAW,EAAEI,YAAY,CAACH,aADS;AAEnCC,UAAAA,aAAa,EAAEE,YAAY,CAACD,OAFO;AAGnCC,UAAAA,YAAY,EAAEA,YAAY,CAACC;AAHQ,SAAvB;AAAA,OAAd;AAKD;;;iCAEY;AAAA,yBAC4B,KAAKO,KADjC;AAAA,UACHJ,YADG,gBACHA,YADG;AAAA,UACWJ,YADX,gBACWA,YADX,EAGX;;AACA,UAAMqD,OAAO,GAAGrD,YAAY,CAAC2C,KAAb,GAAqBW,IAArB,CAA0B,UAAC3B,CAAD,EAAI4B,CAAJ,EAAU;AAClD,YAAI,EAAE,eAAe5B,CAAjB,CAAJ,EAAyB,OAAO6B,MAAM,CAACC,gBAAd;AACzB,YAAI,EAAE,eAAeF,CAAjB,CAAJ,EAAyB,OAAOC,MAAM,CAACE,gBAAd;AACzB,eAAO/B,CAAC,CAACe,SAAF,GAAca,CAAC,CAACf,KAAvB;AACD,OAJe,CAAhB;AAMA,UAAMmB,SAAS,GAAG,KAAKrB,QAAL,CAAce,OAAd,EAAuBjD,YAAvB,CAAlB;AACA,UAAMC,MAAM,GAAG,KAAKuC,UAAL,CAAgBe,SAAhB,CAAf;AAEA,WAAK7C,QAAL,CAAc;AACZT,QAAAA,MAAM,EAAEA;AADI,OAAd;AAGD,K,CAED;;;;6BAqCS;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,UAAU,EAAE,KAAK6B,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,QAAD;AACE,QAAA,YAAY,EAAE,KAAKW,OAAL,CACZ,KAAKrC,KAAL,CAAWN,aADC,EAEZ,KAAKM,KAAL,CAAWlB,OAFC,CADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAQG,KAAKkB,KAAL,CAAWH,MAAX,GAAoB,KAAK2C,YAAL,EAApB,GAA0C,KAAKD,UAAL,EAR7C,CADF;AAYD;;;;EAjIehE,S;;AAoIlB,eAAewB,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport jsonData from \"./api/heartburn.json\";\n\n//components\nimport Quiz from \"./components/Quiz\";\nimport Result from \"./components/Result\";\nimport Header from \"./components/Header\";\nimport Progress from \"./components/Progress\";\n\nconst initialState = {\n  counter: 1,\n  questions: jsonData.questions,\n  outcome: jsonData.outcomes,\n  questionId: jsonData.questions[0].id,\n  questionTxt: jsonData.questions[0].question_text,\n  answerOptions: jsonData.questions[0].answers,\n  nextQuestion: jsonData.questions[0].next,\n  questionTotal: jsonData.questions.length,\n  patientScore: 0,\n  result: \"\"\n};\nconst storedState = [];\nclass App extends Component {\n  state = initialState;\n\n  findQuestion = id => {\n    const { questions } = this.state;\n    return questions.find(question => question.id === `${id}`);\n  };\n\n  handleAnswerSelected = e => {\n    const { nextQuestion } = this.state;\n    const counter = this.state.counter + 1;\n    this.setState({ counter: counter });\n    this.setUserScore(parseInt(e.currentTarget.value));\n\n    const questionID = e.target.dataset.qid;\n    const nextId = this.setNextQuestionByAnswer(questionID);\n    storedState.push(this.state);\n    if (nextQuestion.some(a => a.answered || a.next_question)) {\n      setTimeout(() => this.setNextQuestion(nextId), 300);\n    } else {\n      setTimeout(() => this.setResults(), 300);\n    }\n  };\n\n  resetQuiz = () => {\n    this.setState({ ...initialState });\n  };\n\n  prevQuestion = () => {\n    if (storedState.length >= 1) {\n      this.setState({\n        ...storedState.pop()\n      });\n    }\n  };\n\n  setUserScore(score) {\n    this.setState((prevState, props) => ({\n      patientScore: prevState.patientScore + score\n    }));\n  }\n\n  setNextQuestionByAnswer = answeredId => {\n    const { nextQuestion } = this.state;\n    if (nextQuestion.some(next => next.answered)) {\n      return nextQuestion.find(answer => answer.answered === `${answeredId}`)\n        .next_question;\n    } else if (nextQuestion.some(next => next.next_question)) {\n      return nextQuestion[0].next_question;\n    }\n  };\n\n  setNextQuestion(next) {\n    const nextQuestion = this.findQuestion(next);\n    this.setState((prevState, props) => ({\n      questionTxt: nextQuestion.question_text,\n      answerOptions: nextQuestion.answers,\n      nextQuestion: nextQuestion.next\n    }));\n  }\n\n  setResults() {\n    const { patientScore, nextQuestion } = this.state;\n\n    // Sort the array to avoid multiple OR conditions.\n    const sortArr = nextQuestion.slice().sort((a, b) => {\n      if (!(\"max_score\" in a)) return Number.MAX_SAFE_INTEGER;\n      if (!(\"max_score\" in b)) return Number.MIN_SAFE_INTEGER;\n      return a.max_score - b.score;\n    });\n\n    const outcomeId = this.findDesc(sortArr, patientScore);\n    const result = this.findOutome(outcomeId);\n\n    this.setState({\n      result: result\n    });\n  }\n\n  // This function finds the specific 'outcome' just comparing the current index.\n  findDesc = (arr, score) => {\n    for (let i = 0; i < arr.length; i++) {\n      if (score <= arr[i].max_score) return arr[i].outcome;\n    }\n    return arr.slice(-1).pop().outcome;\n  };\n\n  findOutome = id => {\n    const { outcome } = this.state;\n    return outcome.find(outcome => outcome.id === `${id}`);\n  };\n\n  preCalc = (total, counter) => (counter / total) * 100;\n  renderQuiz = () => {\n    const { questionId, questionTxt, answerOptions } = this.state;\n    return (\n      <Quiz\n        id={questionId}\n        question={questionTxt}\n        answerOptions={answerOptions}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  };\n\n  renderResult = () => {\n    const { result } = this.state;\n    return (\n      <Result\n        text={result.text}\n        bookingBtn={result.show_booking_button}\n        startOver={this.resetQuiz}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header backButton={this.prevQuestion} />\n        <Progress\n          precentValue={this.preCalc(\n            this.state.questionTotal,\n            this.state.counter\n          )}\n        />\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}